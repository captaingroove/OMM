#!/usr/bin/env ipython3 -i
# -*- coding: utf-8 -*-

#***************************************************************************#
#  OMM - Open Multimedia                                                    #
#                                                                           #
#  Copyright (C) 2016                                                       #
#  JÃ¶rg Bakker (jb'at'open-multimedia.org)                                  #
#                                                                           #
#  This file is part of OMM.                                                #
#                                                                           #
#  OMM is free software: you can redistribute it and/or modify              #
#  it under the terms of the GNU General Public License as published by     #
#  the Free Software Foundation version 3 of the License.                   #
#                                                                           #
#  OMM is distributed in the hope that it will be useful,                   #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
#  GNU General Public License for more details.                             #
#                                                                           #
#  You should have received a copy of the GNU General Public License        #
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
#***************************************************************************#

# renderer dependencies:
# mplayer
# mplayer.py

import time
import mplayer

import upnp

class TestController(upnp.Controller):
    # implement callback for device container add events
    def addDeviceContainer(self, device_container, index, begin):
        if not begin: print("TestController device container added, root device uuid: " +
                            device_container.getRootDevice().getUuid())

    # implement callback for device container remove events
    def removeDeviceContainer(self, device_container, index, begin):
        if not begin: print("TestController device container removed, root device uuid: " +
                            device_container.getRootDevice().getUuid())

    def start(self):
        self.server_group = upnp.CtlMediaServerGroup()
        self.renderer_group = upnp.CtlMediaRendererGroup()
        # register Media Servers and Media Renderers (other devices will be ignored)
        self.registerDeviceGroup(self.server_group)
        self.registerDeviceGroup(self.renderer_group)
        self.init()
        # start the controller
        self.setState(upnp.Controller.Public)

    def stop(self):
        # stop the controller and leave the renderer playing the child object
        self.setState(upnp.Controller.Stopped)

    def play_first_title(self):
        # wait for a Media Server to pop up
        while self.server_group.getDeviceCount() == 0:
            time.sleep(0.5)

        # get the first Media Server
        server = self.server_group.getDevice(0)
        print("media server device friendly name: ", server.getFriendlyName())
        server.browseRootObject()
        root = server.getRootObject()
        print("root object title: ", root.getTitle())
        print("root object class: ", root.getClass())
        if upnp.AvClass.matchClass(root.getClass(),  upnp.AvClass.CONTAINER):
            print("root object child count: ", root.getChildCount())
            # get first child of root object
            child = root.getChildForRow(0)
            print("first child title: ", child.getTitle())
            print("first child object class: ", child.getClass())
            # check if child is an audio or video media object
            if upnp.AvClass.matchClass(child.getClass(), upnp.AvClass.ITEM, upnp.AvClass.AUDIO_ITEM) or \
            upnp.AvClass.matchClass(child.getClass(), upnp.AvClass.ITEM, upnp.AvClass.VIDEO_ITEM):
                res = child.getResource(0)
                print("first child resource uri: ", res.getUri())

                # wait for a Media Renderer to pop up
                while self.renderer_group.getDeviceCount() == 0:
                    time.sleep(0.5)

                # get the first Media Renderer
                renderer = self.renderer_group.getDevice(0)
                print("media renderer device friendly name: ", renderer.getFriendlyName())
                # set the AVTransportURI to the child object
                renderer.setObject(child, None, 0)
                # play the child object
                renderer.playPressed()

    def ls(self, path="/"):
        if path == "/":
            for server_idx in range(self.server_group.getDeviceCount()):
                server = self.server_group.getDevice(server_idx)
                print(server_idx, server.getFriendlyName() + "/")
        else:
            server_idx = int(path.lstrip("/"))
            server = self.server_group.getDevice(server_idx)
            server.browseRootObject()
            root = server.getRootObject()
            # print("root object title: ", root.getTitle())
            # print("root object class: ", root.getClass())
            if upnp.AvClass.matchClass(root.getClass(),  upnp.AvClass.CONTAINER):
                for child_idx in range(root.getChildCount()):
                    child = root.getChildForRow(child_idx)
                    if upnp.AvClass.matchClass(child.getClass(),
                                               upnp.AvClass.CONTAINER):
                        print(child_idx, child.getClass(), child.getTitle() + "/")
                    else:
                        print(child_idx, child.getClass(), child.getTitle())
                # check if child is an audio or video media object
                # if upnp.AvClass.matchClass(child.getClass(), upnp.AvClass.ITEM, upnp.AvClass.AUDIO_ITEM) or \
                # upnp.AvClass.matchClass(child.getClass(), upnp.AvClass.ITEM, upnp.AvClass.VIDEO_ITEM):

    def item(self, server_idx=0, child_idx=0):
        server = self.server_group.getDevice(server_idx)
        server.browseRootObject()
        root = server.getRootObject()
        return root.getChildForRow(child_idx)

    def uri(self, server_idx=0, child_idx=0):
        child = self.item(server_idx, child_idx)
        return child.getResource(0).getUri()

    def load_uri(self, server_idx=0, child_idx=0):
        self._uri = self.uri(server_idx, child_idx)

    def play_uri(self, server_idx=0, child_idx=0):
        self._player = mplayer.Player()
        self._player.loadfile(self._uri)

    def pause_uri(self):
        self._player.pause()

    def stop_uri(self):
        self._player.quit()


if __name__ == "__main__":
    upnp.Log.logToFile("/tmp/ommcontroller.log")
    c = TestController()
    c.start()
