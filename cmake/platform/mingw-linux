set(CMAKE_SYSTEM_NAME Windows)
set(CMAKE_SYSTEM_PROCESSOR i686-w64-mingw32)    # target is 32-bit windows (host 64-bit linux)
#set(CMAKE_SYSTEM_PROCESSOR x86_64-w64-mingw32)  # target is 64-bit windows (host 64-bit linux)
#set(CMAKE_SYSTEM_PROCESSOR i586-mingw32msvc)     # target is 32-bit windows (host 32-bit linux)
set_property(GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS TRUE)

set(SDKROOT "/home/jb/app/xchain/cc/mingw32-dw2")   # toolchain for 32-bit windows with dwarf2 exceptions (host 64-bit linux)
#set(SDKROOT "/home/jb/app/xchain/cc/mingw32")       # toolchain for 32-bit windows with sjlj exceptions (host 64-bit linux)

set(CMAKE_C_COMPILER "${CMAKE_SYSTEM_PROCESSOR}-gcc")
set(CMAKE_CXX_COMPILER "${CMAKE_SYSTEM_PROCESSOR}-g++")
set(CMAKE_RC_COMPILER "${SDKROOT}/bin/${CMAKE_SYSTEM_PROCESSOR}-windres")
#set(CMAKE_RC_COMPILER "${CMAKE_SYSTEM_PROCESSOR}-windres")     # cmake doesn't find rc compiler this way
set(CMAKE_RC_COMPILE_OBJECT "<CMAKE_RC_COMPILER> -O coff <DEFINES> -i <SOURCE> -o <OBJECT>")

add_definitions(-DPOCO_STATIC)
set(CMAKE_C_STANDARD_LIBRARIES "${CMAKE_C_STANDARD_LIBRARIES} -liphlpapi -lws2_32")
set(CMAKE_CXX_STANDARD_LIBRARIES "${CMAKE_CXX_STANDARD_LIBRARIES} -liphlpapi -lws2_32")

# option -mwindows turns console app into windows app (w/o console window)
# this should also be achievable with option WIN32 in cmake command add_executable
# (currently commented out, because WIN32 is used for all gui executables)
#set(CMAKE_C_FLAGS "-mwindows" CACHE STRING "additional cross compiling c flags" FORCE)
#set(CMAKE_CXX_FLAGS "-mwindows" CACHE STRING "additional cross compiling cxx flags" FORCE)

set(CMAKE_FIND_ROOT_PATH "${SDKROOT}" "${CMAKE_INSTALL_PREFIX}")
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
